= Modified Nodal Analysis (MNA) =

As an extension to the Nodal Analysis, CHuNG-WEN HO, ALBERT E. RUEHLI AND PIERCE A. BRENNAN,
described their modified nodal analysis (MNA) method in their 1975 paper.

The addition allows to create a matrix in linear time by iterating over the lines of a 
textual description of a circuit. That matrix lends itself to equation solving algorithms.
That means MNA allows the computation of any circuit by a computer which was not possible with
standard nodal analysis.




== Groups ==

Before solving the linear equations, the equations have to be determined from the textual circuit 
description. The equations are read from the MNA matrix. The MNA matrix has to be construted first,
in linear time by reading the circuit description.

To construct the MNA matrix, so called stamps are used.
stamps are templates that prescribe which numbers to add into the elements of the MNA matrix
for each lumped element in the circuit.

Every lumped element has either one or two stamps of which exactly one is applied to the MNA matrix.

If a lumped element has only a single stamp, that stamp is used for the element always.

If a lumped element has two stamps, one of those stamps is choosen based on it's membership in 
the groups. There are exactly two groups.
When the element is in group 1, it's group 1 template is used.
When the element is in group 2, it's group 2 template is used.

That means, that during construction of the MNA matrix, the computer has to first determine
if a lumped element in the circuit description belongs to group 1 or group 2. It then has to
apply the correct stamp to build the matrix.

=== Determining Group Membership ===

group 1 elements are described as (see page.33 [2]);
"Deﬁnition 2.6. (Element Groups) All elements whose currents are to be elimi-
nated will be referred to as being in group 1 ..."

group 2 elements are described as (see page.33 [2]);
"..., while all other elements will be referred to as group 2."

This definition does not allow for a programmer to implement the decision making in code.

So a better definition of group 1 for implementars is given in (see page.33 [2])

"Recall, the elements in group 1 must be either resistors, independent current
sources, VCCS, or CCCS."

And a better definition of group 2 is given in (see page.33 [2])
"keeping in mind that the controlling element for the CCCS is in group 2"

That means that for an element to go into group 1
- the element is any type of Current Source, be it Independant, Voltage- or Current Controlled Current Sources
- the element is a resistor that is not in group 2

That means that for an element to go into group 2
- the element is a resistor of which the current over the resistor is used as a control 
  variable for current sources
- the element is not in group 1





== Voltage and Current entries in the MNA matrix ==

For all elements in group 1, there will be a voltage entry in the MNA matrix. (Current Source -> Voltage equation)
For all elements in group 2, there will be a current entry in the MNA matrix. (Voltage Source -> Current equation)

This can be derived by observing the excercise 2.10 in [2] 






== Dimensions of the MNA Matrix =

To find the dimension of the MNA matrix, first build the so-called "v i" - vector (short vi)

vi is constructed with elements for all voltages and the elements for all currents appended to that.

Example:
If there are two voltages (v1 and v2) and to currents (i1 and i2) then vi looks like [v1 v2 i1 i2]T (T for transposed).
The MNA matrix is then veT x ve, that means the MNA matrix is constructed from the 16 elements using the 
columns v1 v2 i1 i2 as in viT and the rows v1, v2, i1, i2 as in vi

How many v and i are there in the ie vector?
For every element in group1, add a voltage element
For every element in group2, add a current element

So, if your circuit has n lumped elements, you will get a n x n MNA matrix.
group 1 and group 2 form a partition over all elements in the circuit so 
the amount of elements in group 1 added with the amount of elements in group 2 will add up to n.
You will have size(group 1) voltage equations
You will have size(group 2) current equations





== Excercise 2.10 in [2] ==

Algorithm:
1. Count rows in the circuit description == amount of lumped elements == dimension of MNA matrix
2. Add elements to groups:
   - IVS -> group 2
   - ICS -> group 1
   - Resistor dependent on group tag in circuit description, either group 1 or group 2 if G2 tag is present
3. Build stamps for each lumped element. Watch reference node 0 and collapse stamps accordingly
4. Add stamps into the MNA matrix and RHS
5. Output the result.

Execution of the Algorithm:
1. there are 13 rows

2. Assign lumped elements to groups 
Resistors: All resistors go to group 1 except R3 and R8 which are tagged as group 2 (I do not know/understand why yet!)
IVS: All the IVS go into group 2 (V1, V2, V3), all the Group 2
ICS: All the ICS go into group 1
That means
group 1 = {I1, I2, R1, R2, R4, R5, R6, R7}
group 2 = {V1, V2, V3, R3, R8}

3. Create the row and column mapping:
- leave the group 1 node order open, because the algorithm will determine it correctly
- add the group 2 elements manually because the algorithm will not determine it correctly
- group 2 Resistors first ordered by name lexicographically. Then voltage sources ordered by name lexicographically.
- Do not insert an entry for the reference node / node 0

3. Build stamps
- The circuit graph is traversed by it's nodes.
- A width first traversal is used. (That means first the connection between the node itself and it's children
  are processed, then the algorithm is applied recursively on the children in the same order that they were 
  processed from the parent before)
- The start node is 4 (for some unknown reason.
- When reaching the reference node, node 0, no processing is done from node 0 onwards! 
  That branch of tree traversal is a NOP (= no operation)
- Already processed directions between nodes are not processed again, but skipped. 
  Only non-processed branches are processed!

4. width first traversal and insert stamps into the MNA using the row and column mapping
In the following the term 'width' is used.
The term 'width' is defined as: 
"All lumped elements, that are connected to the node 
(The width does explicitly not comprise the child nodes, only the connected lumped elements on the branch connections)"







Start at Node 4:
	STEP 1: process width first, before child nodes
		4 -> width of 4 is: 8 (4,8 == insert I1), 3 (4,3 = insert R6), 0 (4,0 = insert R8) done (DO NOT PROCESS FURTHER FROM NODE 0 = REFERENCE NODE)
	STEP 2: Process child nodes
		Child Node 8:
			STEP 1: process width first, before child nodes
				8 -> width of 8 is: 4 (8,4 == ALREADY PROCESSED, SKIP), 0 (8,0 == insert R7), done (DO NOT PROCESS FURTHER FROM NODE 0 = REFERENCE NODE)
			STEP 2: Process child nodes	
				Child Node 4:
					ALREADY PROCESSED, SKIP
				Child Node 0:
					ALWAYS SKIP REFERENCE NODE 0
			STEP 3:
>>>>			Node 8 done:
		Child Node 3:
			STEP 1: process width first, before child nodes
				3 -> width of 3 is: 2 (3,2 == insert V2), 4 (3,4 == ALREADY PROCESSED, SKIP), done
			STEP 2: Process child nodes
				Child Node 2:
					STEP 1: process width first, before child nodes
						2 -> width of 2 is: 3 (2,3 == ALREADY PROCESSED, SKIP), 6 (2,6 == insert R5), 5 (2,5 == insert R3), 1 (2,1 == insert R2), done
					STEP 2: Process child nodes
						Child 3: 
							ALREADY PROCESSED, SKIP
						Child 6:
							STEP 1: process width first, before child nodes
								6 -> width of 6 is: 2 (6,2 == ALREADY PROCESSED, SKIP), 7 (6,7 == insert V3), 0 (6,0 == insert I2), 5 (6,5 == insert R4), done
							STEP 2: Process child nodes
								Child Node 2: 
									ALREADY IN PROCESSING, SKIP
								Child Node 7: 
									STEP 1: Process width first, before child nodes
										width of 7 is: 2 (7,2 == ALREADY IN PROCESSING, SKIP)
									STEP 2: Process child nodes
										Child Node 6: ALREADY IN PROCESSING, SKIP)
									STEP 3:
>>>>									Node 7 done
								Child Node 0: 
									ALWAYS SKIP REFERENCE NODE 0
								Child Node 5:
									STEP 1: process width first, before child nodes
										5 -> width of 5 is: 6 (5,6 == ALREADY PROCESSED, SKIP), 2 (5,2 == ALREADY PROCESSED, SKIP), 1 (5,1 == insert R1), 0 (5,0 == insert V1), done
									STEP 2: Process child nodes
										Child 6:
											ALREADY PROCESSED
										Child 2:
											ALREADY PROCESSED
										Child 1:
											STEP 1: process width first, before child nodes
												1 -> width of 1 is: 2 (1,2 == ALREADY PROCESSED, SKIP), 5 (5,1 == ALREADY PROCESSED, SKIP)
											STEP 2: Process child nodes
												All nodes already process
>>>>						                Child 1 done
										Child 0:
											ALWAYS SKIP REFERENCE NODE 0
									STEP 3: 
>>>>									Node 5 done
							STEP 3:
>>>>							Node 6 done
						Child Node 5:
							ALREADY Processed (via node 6 as parent)
						Child Node 1:
							ALREADY Processed (via node 5 as parent)						
					STEP 3:
>>>>					Node 2 done	
				Child Node 4:
					ALREADY PROCESSED
			STEP 3:
>>>>			Node 3 done				
		Child 0:
			ALWAYS SKIP REFERENCE NODE 0
	STEP 3:
>>>>	Node 4 done



According to the run above, the insert order is:

insert I1 - node 4 - node 8
insert R6 - node 3 - node 4
insert R8 - node 4 - node 0 (group 2)
insert R7 - node 8 - node 0
insert V2 - node 3 - node 2 (group 2)
insert R5 - node 2 - node 6
insert R3 - node 5 - node 2 (group 2)
insert R2 - node 1 - node 2
insert V3 - node 7 - node 6 (group 2)
insert I2 - node 0 - node 6
insert R4 - node 5 - node 6 
insert R1 - node 1 - node 5
insert V1 - node 5 - node 0 (group 2)

This yields the node and group 2 insert order 
4, 8, 3, R8, V2, 2, 6, R3, 5, 1, V3, 7, V1
This is the order of the columns

This would be the wrong order because this order determines
the rows and columns of the MNA matrix, but that order has to adhere to one important constraint:

group 1 elements have to be contained before group 2 elements!
That is why the node order 4, 8, 3, 2, 6, 5, 1, 7 is kept, while the group 2 elements are
moved to the end in an ordered fashion R8, R3, V3, V2, V1

That means group 2 resistors before voltage sources, both ordered by their name lexicographically descending.
	
The reorder ultimately yields:
4, 8, 3, 2, 6, 5, 1, 7, R8, R3, V3, V2, V1






The order is:
node 4 - insert all lumped elements connected to node 4, that is between (4, 8) then (4, 3)
node ? 

ICS:
I1 (group 1)(node 4 - node 8) 

		v+		v-		RHS
---------------------------------
v+						-I
v-						+I

		v4		v8		RHS
---------------------------------
v4						-0.001
v8						+0.001

IVS:

Resistors:

R1 (group 1)(node 1 - node 5) 
		v+		v-		RHS
--------------------------------
v+		1/R		-1/R
v-		-1/R	1/R

		v1			v5
v1		1/1.5     	-1/1.5
v5		-1/1.5    	1/1.5

2/3     -2/3
-2/3    2/3





== Stamps ==




=== Resistors (R) ===

Resistors have two stamps:

Stamp for group 1:

		v+		v-		RHS
--------------------------------
v+		1/R		-1/R
v-		-1/R	1/R

Stamp for group 2:

		v+		v-		i		RHS
----------------------------------------
v+						+1
v-						-1
i		+1		-1		-R


Collapsing:
Stamps for group 1 resistors can collapse if the resistor is connected
to the refernce node (0V) with one of it's terminals. The stamp then consist of only a single element:

Let R be connected to a voltage v_2 using it's v+ terminal and to ground/reference with it's v- terminal
Let R be a 1 ohm resistor
Let R be a group 1 resistor

The stamp originally is:

		v+		v-		RHS
--------------------------------
v+		1/R		-1/R
v-		-1/R	1/R

Because of the reference connection to ground / reference, it collapse to

		v_2		RHS
------------------------
v_2 	1

Collapsing means, rows and columns of the terminals connected to ground / refernces are just ignored / removed
from the stamp, or not added to the MNA matrix when that stamp is applied.





== Independant Current Sources (ICS) ==

ICS have two stamps:

Stamp for group 1:

		v+		v-		RHS
---------------------------------
v+						-I
v-						+I

Stamp for group 2:

		v+		v-		i		RHS
----------------------------------------
v+						+1
v-						-1
i						+1		I




== Independant Voltage Source (IVS) ==

Has only a single stamp:

		v+		v-		i		RHS
----------------------------------------
v+						+1
v-						-1
i		+1		-1				V

== Voltage Controlled Voltage Source (VCVS) ==

Has only a single stamp

		v+		v-		v_x+		v_x-		i		RHS
-----------------------------------------------------------------
v+												+1
v-												-1
i		+1		-1		-k			+k

== Current Controlled Voltage Source (CCVS) ==

Has only a single timestamp

		v+		v-		i_s			i_x			RHS
-----------------------------------------------------------------
v+						+1						
v-						-1						
i_s		+1		-1					-k
i_x








== Literature ==

[1] @article{ho1975modified
,	title	= {The modified nodal approach to network analysis}
,	author	= {Ho, Chung-Wen and Ruehli, Albert E and Brennan, Pierce A}
,	journal	= {Circuits and Systems, IEEE Transactions on}
,	volume	= {22}
,	number	= {6}
,	pages	= {504--509}
,	year	= {1975}
,	publisher	= {IEEE}
}

[2] Farid N. Najm, Circuit Simulation, Wiley